data.1 <- 830
data.x <- c(830, 12, 872, 147, 873)
clear
install.pakages("ggplot2")
install.packages("ggplot2")
search()
library(ggplot2)
search()
version
install.R()
version
check.for.updtes.R()
updateR()
install.packages("installr")
.libPaths()
getwd()
# 데이터 생성 및 값 확인
data.1 <- 830
data.x <- c(830, 12, 872, 147, 873)
data.x[1]
## 2. 문자 데이터 생성 및 값 변경
data.x <- "a"
data.y <- c("a", "b", "c", "z")
# 1, 4번째 값
data.y[c(1.4)]
# 1, 4번째 값
data.y[c(1, 4)]
data.y[4] <- "d"
data.y
## 3. 데이터 목록
ls()
ls(pos = 3)
## 4. 데이터 삭제
rm(data.x)
rm(list = ls())
#패키지 설치 : 최초 1회 수행
install.packages("psych")
#패키지 로딩
library(psych)
#패키지 확인
search()
#작업 디렉토리 설정
setwd("C:/workspace/github/r/01Fundamental")
iris_df <- read.csv(file = "data/DAT/example.csv",
header = TRUE,
sep = ",",
stringsAsFactors = TRUE)
describe(iris_df)
#작업 디렉토리 설정
setwd("C:/workspace/github/r/01Fundamental")
iris_df <- read.csv(file = "data/DAT/iris_data.csv",
header = TRUE,
sep = ",",
stringsAsFactors = TRUE)
describe(iris_df)
#행과 열을 갖는 데이터프레임임
iris_df <- read.csv(file = "data/DAT/iris_data.csv",
header = TRUE,
sep = ",",
stringsAsFactors = FALSE)
View(iris_df)
#iris 데이터에 대한 데이터 요약약
describe(iris_df)
#품종에 따른 데이터 요약
describeBy(iris_df[, c(1:4)], iris_df$Species)
View(iris_df)
## 5. 데이터 값 추출
data.3 <- c(1, 6, 2, 3, 1, 4, 1, 5, 1, 6)
## 5. 데이터 값 추출
data.3 <- c(1, 6, 2, 3, 1, 4, 1, 5, 1, 6)
unique(data.3)
data.4 <- c("1학년", "2학년", "3학년")
substr(data.4, 1, 2)
## 6. 데이터 값 화면 출력
data.3 <- 3
print(data.3)
cat("오늘은 학습", data.3, "회차입니다")
#작업 디렉토리 설정
setwd("C:/workspace/github/r/01Fundamental")
#작업 디렉토리 확인
getwd()
# 패키지 설치 : 최초 1회만 수행
install.packages("dplyr")
# 패키지 로딩
library(dplyr)
# 패키지 설치 : 최초 1회만 수행
install.packages("dplyr")
install.packages("dplyr")
# 패키지 로딩
library(dplyr)
# 패키지 확인
search()
# 작업 디렉토리 설정
setwd("C:/workspace/github/r/01Fundamental/data")
# 데이터 불러오기
iris_df <- read.csv(file = "DAT/iris_data.csv",
stringsAsFactors = TRUE)
# dataframe 형식에서 tibble 형식으로 바꿔 저장
iris_tbl_df <- as_tibble(iris_df)
iris_tbl_df
# select()
iris_tbl_df %>%
select(Sepal.Length, Sepal.Width, Species)
# rename()
iris_tbl_df %>%
rename(Iris.species = Species)
# mutate()
# 새로운 컬럼 추가
iris_tbl_df %>%
mutate(New_col = Sepal.Length * 2)
# mutate()
# 새로운 컬럼 추가
iris_tbl_df %>%
mutate(New_col = Sepal.Length * 2)
# summarise()
# dplyr 패키지에서 제공하는 데이터 요약을 위한 기능
iris_tbl_df %>%
summarise(mean.SL = mean(Sepal.Length))
# 패키지 로딩
library(ggplot2)
# 패키지 확인
search()
# 작업 디렉토리 설정
setwd("C:/workspace/github/r/01Fundamental/data")
# 데이터 불러오기
iris_df <- read.csv(file = "DAT/iris_data.csv",
stringsAsFactors = TRUE)
# 히스토그램(Histogram) 그래프
ggplot(data = iris_df) +
geom_histogram(mapping = aes(x = Petal.Length))
# 히스토그램(Histogram) 그래프
# 막대에 품종을 구분하여 색상 표시
ggplot(data = iris_df) +
geom_histogram(mapping = aes(x = Petal.Length,
fill = Species))
# 산점도(Scatter Plot) 그래프
ggplot(data = iris_df) +
geom_point(mapping = aes(x = Petal.Length,
y = Petal.Width))
# 산점도(Scatter Plot) 그래프
# 포인트(데이터 값)에 품종을 구분하여 색상 표시
ggplot(data = iris_df) +
geom_point(mapping = aes(x = Petal.Length,
y = Petal.Width,
colour = Species))
# 산점도(Scatter Plot) 그래프
ggplot(data = iris_df) +
geom_point(mapping = aes(x = Petal.Length,
y = Petal.Width))
# 산점도(Scatter Plot) 그래프
# 포인트(데이터 값)에 품종을 구분하여 색상 표시
ggplot(data = iris_df) +
geom_point(mapping = aes(x = Petal.Length,
y = Petal.Width,
colour = Species))
# 산점도(Scatter Plot) 그래프 파일 저장
png(filename = "C:/Rproject/OUT/ggplot2.png",
width = 1024, height = 768)
# 산점도(Scatter Plot) 그래프 파일 저장
png(filename = "C:/workspace/github/r/01Fundamental/data/OUT/ggplot2.png",
width = 1024, height = 768)
ggplot(data = iris_df) +
geom_point(mapping = aes(x = Petal.Length,
y = Petal.Width,
colour = Species))
dev.off()
# 패키지 로딩
library(plotly)
# 패키지 설치 : 최초 1회만 수행
install.packages("plotly")
# 패키지 확인
search()
# 패키지 로딩
library(plotly)
# 패키지 확인
search()
# ggplot 그래프 작성
p1 <- ggplot(data = iris_df) +
geom_point(mapping = aes(x = Petal.Length,
y = Petal.Width,
colour = Species))
# 동적 ggplot 그래프 작성
ggplotly(p1)
# 작업 디렉토리 설정
setwd("C:/workspace/github/r/01Fundamental/data")
# 데이터 불러오기
iris_df <- read.csv(file = "DAT/iris_data.csv",
stringsAsFactors = TRUE)
# 두 변수간의 상관계수 계산
cor(iris_df$Petal.Length, iris_df$Petal.Width)
# 두 변수간의 상관계수 계산
cor(iris_df$Sepal.Length, iris_df$Sepal.Width)
# 상관관계 유의성 검정
cor.test(iris_df$Sepal.Length,
iris_df$Sepal.Width)
# 패키지 로딩
library(dplyr)
# 품종별 두 변수간의 상관계수 계산
iris_df %>%
group_by(Species) %>%
summarize(COR = cor(Sepal.Length,
Sepal.Width))
# 숫자형 변수들간의 상관계수 계산
cor(iris_df[, c(1:4)])
# 패키지 설치 : 최초 1회만 수행
install.packages("corrplot")
# 패키지 로딩
library(corrplot)
# 패키지 확인
search()
# 숫자형 변수들간의 상관계수 계산
iris_cor_result <- cor(iris_df[, c(1:4)])
iris_cor_result
# 상관관계 그래프 작성
# circle 형태로 표시
corrplot(corr = iris_cor_result)
# 숫자로 표시
corrplot(corr = iris_cor_result,
method = "number")
# circle 형태 + 숫자로 표시
corrplot(corr = iris_cor_result,
method = "circle",
type = "lower",
addCoef.col = "black")
# 연관성 높은 변수들로 군집 생성
corrplot(corr = iris_cor_result,
order = "hclust",
addrect = 2)
# 작업 디렉토리 설정
setwd("C:/workspace/github/r/01Fundamental/data")
data.x <- c(1:10)
plot(data.x)
# 1. 데이터 불러오기
# 작업 디렉토리 설정
setwd("C:/workspace/github/r/01Fundamental/data")
# 데이터 불러오기
cancer_df <- read.csv(file = "DAT/cancer_data.csv",
header = TRUE,
sep = ",",
stringsAsFactors = TRUE)
# 2. 데이터 탐색 및 전처리
# 데이터 구조
str(cancer_df)
# 데이터 확인
head(cancer_df)
# 패키지 로딩
library(dplyr)
# 패키지 확인
search()
# 데이터를 Id 변수의 오름차순 정렬
# 데이터 정렬 기능: arrange()
cancer_df <- cancer_df %>% arrange(Id)
# 데이터 확인
head(cancer_df)
# 데이터 정합성 확인
# Id 변수 중복 여부 확인
length(unique(cancer_df$Id))
# Id 변수 값에 대한 건수 확인
sort(table(cancer_df$Id))
# Id 변수 값에 대한 건수 중 중복된 Id 데이터 건수
Id.cnt <- sort(table(cancer_df$Id))
Id.cnt[Id.cnt > 1]
# 중복된 Id 데이터 건수의 합
sum(Id.cnt[Id.cnt > 1])
# 중복된 Id 값
duplicate.Id <- names(Id.cnt[Id.cnt > 1])
duplicate.Id
# 중복된 Id를 분석 데이터에서 제외
cancer_df <- cancer_df %>% filter(!(Id %in% duplicate.Id))
# 데이터 요약
summary(cancer_df)
# 행(row)에 결측치가 있을 경우 분석 대상에서 제외
cancer_df <- na.omit(cancer_df)
# 데이터 요약
summary(cancer_df)
# 종속변수(Class) 빈도 계산
table(cancer_df$Class)
# 종속변수(Class) 비율 계산
prop.table(table(cancer_df$Class))
# 종속변수 0, 1 값 지정
data.y <- as.factor(ifelse(cancer_df$Class == "malignant", 1, 0))
# 독립변수 지정 : Id와 종속변수 제외
x_df <- cancer_df %>% select(-c(Id, Class))
# 독립변수들간의 상관계수 계산
cor_result <- cor(x_df)
cor_result
# 패키지 로딩
library(corrplot)
# 상관관계 그래프 작성
corrplot(corr = cor_result,
method = "circle",
type = "lower",
addCoef.col = "black")
# 연관성 높은 변수들로 군집 생성
corrplot(corr = cor_result,
order = "hclust",
addrect = 2)
# 데이터프레임 생성
data_df <- data.frame(Class = data.y, x_df)
# 패키지 로딩
library(ggplot2)
# 박스플롯(Boxplot) 그래프
ggplot(data = data_df) +
geom_boxplot(mapping = aes(x = Cl.thickness,
y = Class,
fill = Class))
# 3. 데이터 모델링 - 모형학습(로지스틱회귀분석)
# 로지스틱회귀모형 생성
logistic_model <- glm(formula = as.formula("Class ~ ."),
data = data_df,
family = binomial)
# 회귀계수 값
logistic_model
# 로지스틱회귀모형에 대한 정보들
summary(logistic_model)
# 변수선택법을 이용하여 모델 적합하기(후진제거법)
logistic_bwd_model <- step(object = logistic_model,
direction = "backward")
# 변수선택법에 의한 로지스틱회귀모형에 대한 정보들
summary(logistic_bwd_model)
# 로지스틱회귀모형에 대한 정보들
# 종속변수의 적합값
logistic_bwd_model$fitted.values
# 로지스틱회귀모형에 대한 정보들 이름 보기
names(logistic_bwd_model)
# 4. 데이터 모델링 - 모형예측
# 1) 변수선택법에 의한 로지스틱회귀모형에 대한 예측
predict.bwd.p <- predict(object = logistic_bwd_model,
newdata = data_df,
type = "response")
predict.bwd.y <- ifelse(predict.bwd.p > 0.5, 1, 0)
# 실제값과 예측값 비교
table(real = data_df$Class, predict = predict.bwd.y)
# 2) 변수선택법을 적용하지 않은 로지스틱회귀모형에 대한 예측
predict.p <- predict(object = logistic_model,
newdata = data_df,
type = "response")
predict.y <- ifelse(predict.p > 0.5, 1, 0)
# 실제값과 예측값 비교
table(real = data_df$Class, predict = predict.y)
# 평가 지표 계산하기 - 정분류율, 민감도, 특이도
# 실제값과예측값 비교
table(real = data_df$Class, predict = predict.bwd.y)
# 정분류율(Accuracy)
(353 + 212) / 584
# 민감도(Sensitivity)
212 / (11 + 212)
# 특이도(Specificity)
353 / (353 + 8)
# 특이도(Specificity)
353 / (353 + 8)
# 패키지 로딩
library(corrplot)
# 상관관계 그래프 작성
corrplot(corr = cor_result,
method = "circle",
type = "lower",
addCoef.col = "black")
